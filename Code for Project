# p227_starter_one_button_shell.py
# Note this will not run in the code editor and must be downloaded

import subprocess
import tkinter as tk
import tkinter.scrolledtext as tksc
from tkinter import filedialog
from tkinter.filedialog import asksaveasfilename
from token import LEFTSHIFT
 
# Modify the do_command function:
#   to use the new button as needed
def do_command(command):
    
    # Modify the do_command(command) function: 
#   to use the text box for input to the functions
  global command_textbox, url_entry
  command_textbox.delete(1.0, tk.END)
  command_textbox.insert(tk.END, command + " working....\n")
  command_textbox.update()

  p = subprocess.Popen(command + ' ::1', stdout=subprocess.PIPE, stderr=subprocess.PIPE) #v2

  cmd_results, cmd_errors = p.communicate()
  command_textbox.insert(tk.END, cmd_results)
  command_textbox.insert(tk.END, cmd_errors)
    # If url_entry is blank, use localhost IP address 
  url_val = url_entry.get()
  if (len(url_val) == 0):
        # url_val = "127.0.0.1"
        url_val = "::1"
    
# Save function.
def mSave():
  filename = asksaveasfilename(defaultextension='.txt',filetypes = (('Text files', '*.txt'),('Python files', '*.py *.pyw'),('All files', '*.*')))
  if filename is None:
    return
  file = open (filename, mode = 'w')
  text_to_save = command_textbox.get("1.0", tk.END)
  
  file.write(text_to_save)
  file.close()

    
  
    

#Main Code
root = tk.Tk()
frame = tk.Frame(root)
root.title(" User Url GUI Project")
root.configure(background = "light blue")
frame.pack()


# Makes the command button pass it's name to a function using lambda
ping_btn = tk.Button(frame, text="Ping", bg = "light green", width = 10, height = 2,  command=lambda:do_command("ping"))
ping_btn.pack(side=tk.LEFT)


# creates the frame with label for the text box
frame_URL = tk.Frame(root, pady=10,  bg="black") # change frame color
frame_URL.pack()
# set up button to run the mSave function
save_btn = tk.Button(frame, text="Save", bg = "light green", width = 10, height = 2,  command = mSave) # change frame color
save_btn.pack(side = tk.LEFT)
# Makes the command button pass it's name to a function using lambda
tracert_btn = tk.Button(frame, text="Tracert", bg = "light green", width = 10, height = 2, command=lambda:do_command("tracert"))
tracert_btn.pack(side = tk.LEFT)
# Makes the command button pass it's name to a function using lambda
nslookup_btn = tk.Button(frame, text="NsLookup", bg = "light green", width = 10, height = 2,  command=lambda:do_command("nslookup"))
nslookup_btn.pack(side = tk.LEFT)



# decorative label
url_label = tk.Label(frame_URL, text="Enter a URL of interest: ", 
    compound="center",
    font=("comic sans", 14),
    bd=0,
    relief=tk.FLAT, 
    cursor="heart",
    fg="orange",
    bg="black")
url_label.pack()
url_entry= tk.Entry(frame_URL,  font=("comic sans", 14)) # change font
url_entry.pack()

frame = tk.Frame(root,  bg="black") # change frame color
frame.pack()

# Adds an output box to GUI.
command_textbox = tksc.ScrolledText(frame, height=10, width=100)
command_textbox.pack()
root.mainloop()
